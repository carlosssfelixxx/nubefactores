name: CI/CD Pipeline

on:
  push:
    branches:
      - '**'
  workflow_dispatch:

env:
  CGO_ENABLED: "0"
  GOOS: linux
  GOARCH: amd64
  AWS_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'

      - name: Extract sanitized branch name
        id: vars
        run: |
          RAW_BRANCH="${{ github.ref_name }}"
          CLEAN_BRANCH=$(echo "$RAW_BRANCH" | sed -E 's:^(feature/|hotfix/|bugfix/|release/)::')
          echo "branch_name=$CLEAN_BRANCH" >> "$GITHUB_OUTPUT"

      - name: Set version tag
        run: |
          echo "VERSION_TAG=1.0.${{ github.run_number }}-${{ steps.vars.outputs.branch_name }}" >> $GITHUB_ENV
      - name: Set Docker image name
        run: |
          echo "DOCKER_IMAGE=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:$VERSION_TAG" >> $GITHUB_ENV

      - name: Tidy and Build
        run: |
          cd cmd
          go mod tidy
          go build -o my-app

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: my-app
          path: cmd/my-app

  docker:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: my-app
          path: ./cmd

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set version tag
        run: |
          echo "VERSION_TAG=1.0.${{ github.run_number }}-${{ steps.vars.outputs.branch_name }}" >> $GITHUB_ENV
      - name: Set Docker image name
        run: |
          echo "DOCKER_IMAGE=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:$VERSION_TAG" >> $GITHUB_ENV


      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set Docker image name
        run: |
          echo "DOCKER_IMAGE=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:$VERSION_TAG" >> $GITHUB_ENV

      - name: Build and push Docker image
        run: |
          docker build -t my-app-image .
          docker tag my-app-image:latest $DOCKER_IMAGE
          docker push $DOCKER_IMAGE

  deploy:
    runs-on: ubuntu-latest
    needs: docker
    if: github.event_name == 'workflow_dispatch' # sÃ³lo manual
    steps:
      - name: Set up SSH key
        run: |
          echo "${{ secrets.EC2_KEY }}" > /tmp/ssh_key.pem
          chmod 600 /tmp/ssh_key.pem

      - name: Deploy to EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i /tmp/ssh_key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST_DEV }} << EOF
            $(aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com)
            docker pull $DOCKER_IMAGE
            docker stop demo-twelve || true
            docker container rm -f demo-twelve || true
            docker run -d --name demo-twelve -p 8080:8080 $DOCKER_IMAGE
